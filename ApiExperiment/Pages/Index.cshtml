@page
@model             IndexModel
@{
    ViewData["Title"] = "Home";
}

<div class="container mt-4">
    <h1 id="user-service-data-api-application">User &amp; Service Data API Application</h1>
    <p>An ASP.NET Core web application that provides user and service data through APIs with different access levels. This project demonstrates how to build a web application with a frontend, backend APIs, and data interactions. It includes functionality for downloading PowerShell scripts and a contact form that sends emails using Microsoft Graph.</p>
    <h2 id="live-demo">Live Demo</h2>
    <p>The application is available for public use at <a href="@Model.PublicUrl">@Model.PublicUrl</a>.</p>
    <p>Swagger is running on this endpoint - if you would like to review what endpoints are available you may access the public Swagger page at <a href="@Model.PublicUrl/swagger">@Model.PublicUrl/swagger</a></p>
    <h2 id="table-of-contents">Table of Contents</h2>
    <ul>
        <li><a href="#features">Features</a></li>
        <li><a href="#technologies-used">Technologies Used</a></li>
        <li>
            <a href="#getting-started">Getting Started</a>
            <ul>
                <li><a href="#prerequisites">Prerequisites</a></li>
                <li><a href="#installation">Installation</a></li>
                <li><a href="#configuration">Configuration</a></li>
                <li><a href="#running-the-application">Running the Application</a></li>
            </ul>
        </li>
        <li>
            <a href="#usage">Usage</a>
            <ul>
                <li><a href="#accessing-the-frontend">Accessing the Frontend</a></li>
                <li><a href="#downloading-powershell-scripts">Downloading PowerShell Scripts</a></li>
            </ul>
        </li>
        <li>
            <a href="#api-endpoints">API Endpoints</a>
            <ul>
                <li><a href="#user-data-api">User Data API</a></li>
                <li><a href="#service-data-api">Service Data API</a></li>
            </ul>
        </li>
    </ul>
    <h2 id="features">Features</h2>
    <ul>
        <li><strong>User Data API</strong>: Provides user data accessible via API endpoints.</li>
        <li><strong>Service Data API</strong>: Provides service data with access level restrictions.</li>
        <li><strong>Frontend Interface</strong>: Razor Pages frontend to interact with the data.</li>
        <li><strong>Downloadable Scripts</strong>: Allows users to download PowerShell scripts for data generation.</li>
        <li><strong>Contact Form</strong>: Users can send messages via a contact form, which sends emails using Microsoft Graph.</li>
        <li><strong>Data Filtering and Searching</strong>: Integrated with DataTables for enhanced data interaction.</li>
    </ul>
    <h2 id="technologies-used">Technologies Used</h2>
    <ul>
        <li><strong>ASP.NET Core</strong> (.NET 6 or later)</li>
        <li><strong>C#</strong></li>
        <li><strong>Razor Pages</strong></li>
        <li><strong>Microsoft Graph SDK</strong></li>
        <li><strong>Bootstrap 5</strong> (Darkly Theme from Bootswatch)</li>
        <li><strong>jQuery</strong></li>
        <li><strong>DataTables</strong></li>
    </ul>
    <h2 id="getting-started">Getting Started</h2>
    <p>These instructions will help you set up the project on your local machine for development and testing purposes.</p>
    <h3 id="prerequisites">Prerequisites</h3>
    <ul>
        <li><strong>.NET SDK</strong>: Install the <a href="https://dotnet.microsoft.com/download/dotnet/6.0">.NET 6 SDK</a> or later.</li>
        <li><strong>Visual Studio 2022</strong> or <strong>Visual Studio Code</strong>: For development.</li>
        <li><strong>Azure Account</strong>: Required if you plan to use Microsoft Graph for sending emails.</li>
        <li><strong>Git</strong>: For cloning the repository.</li>
    </ul>
    <h3 id="installation">Installation</h3>
    <ol>
        <li>
            <p><strong>Clone the Repository</strong></p>
            <pre><code class="language-bash">
            git clone https://github.com/killer6oose/API_Example.git
            </code></pre>
        </li>
        <li>
            <strong>Navigate to the Project Directory</strong>
            <pre><code class="language-bash">
            cd YourRepository
            </code></pre>
        </li>
        <li>
            <p><strong>Install Dependencies</strong> - may not be required if VisualStudio takes care of it!</p>
            <p> a.  Restore NuGet packages by running:</p>
            <pre><code class="language-bash">
            dotnet restore
            </code></pre>
        </li>
    </ol>

    <div class="container mt-4">
        <h1 id="user-service-data-api-application">User &amp; Service Data API Application</h1>
        <p>An ASP.NET Core web application that provides user and service data through APIs with different access levels.</p>

        <h2 id="configuration">Configuration</h2>
        <h5 id="app-settings-for-the-contact-page-if-you-wish-to-use-it-yourself-">App Settings (For the Contact page)</h5>
        <p>
            This project uses <strong>ASP.NET Core User Secrets</strong> for storing sensitive information, such as the Azure AD credentials for the contact form.
            To set up your user secrets, run the following commands in the NuGet Console:
        </p>
        <pre><code class="language-bash">
    dotnet user-secrets init
    dotnet user-secrets set "AzureAd:ClientId" "your-client-id"
    dotnet user-secrets set "AzureAd:TenantId" "your-tenant-id"
    dotnet user-secrets set "AzureAd:ClientSecret" "your-client-secret"
    dotnet user-secrets set "AzureAd:SenderEmail" "support@yourDoamin.tld"
    </code></pre>

        <p>The project is configured to look for these secrets in the User Secrets store rather than in the <code>appsettings.json</code>.</p>
        <ul>
            <li>ClientId, TenantId, ClientSecret: Required for Microsoft Graph API integration. You can obtain these by registering an application in Azure Active Directory (Azure Entra).</li>
        <li>
            <p>
                SenderEmail: The email address used to send emails via Microsoft Graph.
                If you are not using Microsoft Graph, you can remove or ignore this configuration and related code. <strong>If no ClientID is set, the application is designed to </strong>
            </p>
        </ul>
    </div>
    <h5 id="app-settings-for-dynamic-URLs-on-home-page-if-you-wish-to-use-it-yourself-">App Settings (For the Home page URLs, if you wish to use it yourself)</h5>
    <p>Create an appsettings.json file in the root of the project if it doesn&#39;t exist, and add the following configuration:</p>
        <pre><code class="language-json">
        {
          "Settings": {
            "PublicUrl": "https://localhost:7189",
            "SupportEmail": "youremail@yourDomain.tld"
          }
        }
        </code></pre>
    <div class="container mt-4">     
            <h3 id="running-the-application">Running the Application</h3>
            <p>You can run the application using the .NET CLI or Visual Studio.</p>
            <h2 id="using-net-cli">Using .NET CLI</h2>
            <pre><code class="language-bash">
            dotnet run
        </code></pre>
            <h3 id="using-visual-studio">Using Visual Studio</h3>
            <p>
                Open the solution file (<code>.sln</code>) in Visual Studio.
                Set the startup project if not already set.
                Press F5 to run the application in debug mode or Ctrl+F5 to run without debugging.
            </p>
        </li>
    <p>The console should now show you what port to browse.</p>
    <h2 id="usage">Usage</h2>
    <h3 id="accessing-the-frontend">Accessing the Frontend</h3>
Home Page: Navigate to <code>/</code> or <code>/Index</code> to view user data.
Service Data Page: Navigate to <code>/ServiceData</code> to view service data.
Contact Page: Navigate to <code>/Contact</code> to access the contact form.
<h3 id="downloading-powershell-scripts">Downloading PowerShell Scripts</h3>
On the Home or Service Data pages, click the Download Script button in the navbar.
A modal will appear with information about the script.
Acknowledge the disclaimer by checking the checkbox.
Click Download to download the script.
Rename the file from <code>.txt</code> to <code>.ps1</code> to execute the script.
<h2 id="api-endpoints">API Endpoints</h2>
    <h3 id="user-data-api">User Data API</h3>
    <ul>
        <li>
            Get All User Data
        <pre><code class="language-http">
        GET /api/UserData
        </code></pre>
        </li>
        <li>
            Get user Data by Access level<pre><code class="lang-http">POST /api/UserData/accesslevel
        </code></pre>
            <strong>Request Body:</strong>
        <pre><code class="language-json">
        {
        "RequesterAccessLevel">: "Admin" // or "User", "Guest"
        }
        </code></pre>
            <h3 id="service-data-api">Service Data API</h3>
        </li>
        <li>
            <p>Get Service Data by Access Level</p>
        <pre><code class="language-http">
        POST /api/ServiceData/accesslevel
        </code></pre>
            <p><strong>Request Body</strong></p>
        <pre><code class="language-json">
        {
            "RequesterAccessLevel": "Admin" // or "User" or "Guest"
        }
        </code></pre>
        </li>
        <li>
            Generate Service Data Records
            <pre><code class="language-http">
            POST /api/ServiceData/generate
            </code></pre>
        </li>
    </ul>
</div>
